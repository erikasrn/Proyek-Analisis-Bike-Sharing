# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RpibvG4YtRMJr9Ybp063LisLez0FJ3Hg
"""

# Install streamlit if not already installed
!pip install streamlit

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from babel.numbers import format_currency
sns.set(style='dark')

hour_df = pd.read_csv("/hour.csv")
hour_df.head()

# Mengubah tipe data di hour_df ke datetime
hour_df['dteday'] = pd.to_datetime(hour_df.dteday)
hour_df.info()

#Menghapus kolom instant, hum, temp, atemp, dan windspeed di hour_df
drop_col = ['instant','hum','temp','atemp', 'windspeed', 'casual', 'registered']

for i in hour_df.columns:
  if i in drop_col:
    hour_df.drop(labels=i, axis=1, inplace=True)
hour_df.head()

# Mengkonversi isi kolom agar mudah dipahami
# konversi season menjadi: 1:Spring, 2:Summer, 3:Fall, 4:Winter
hour_df.season.replace((1,2,3,4), ('Spring','Summer','Fall','Winter'), inplace=True)

# konversi mnth menjadi: 1:Jan, 2:Feb, 3:Mar, 4:Apr, 5:May, 6:Jun, 7:Jul, 8:Aug, 9:Sep, 10:Oct, 11:Nov, 12:Dec
hour_df.mnth.replace((1,2,3,4,5,6,7,8,9,10,11,12),('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'), inplace=True)

# konversi weather_situation menjadi: 1:Clear, 2:Misty, 3:Light_RainSnow 4:Heavy_RainSnow
hour_df.weathersit.replace((1,2,3,4), ('Clear/Partly Cloudy','Misty/Cloudy','Light Snow/Rain','Heavy Snow/Rain'), inplace=True)

# konversi weekday menjadi: 0:Sun, 1:Mon, 2:Tue, 3:Wed, 4:Thu, 5:Fri, 6:Sat
hour_df.weekday.replace((0,1,2,3,4,5,6), ('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'), inplace=True)

# konversi yr menjadi: 0:2011, 1:2012
hour_df.yr.replace((0,1), ('2011','2012'), inplace=True)
hour_df.head()

# fungsi yang menyatakan jumlah sepeda yang dirental di rentang jam dan tanggal tertentu di dashboard

def show_rent_range_date(df):
  """
  Menampilkan jumlah sepeda yang dirental di rentang jam dan tanggal tertentu di dashboard.
  """
  min_date = pd.to_datetime(df['dteday']).min()
  max_date = pd.to_datetime(df['dteday']).max()

  start_date = st.date_input("Tanggal Awal", min_value=min_date, max_value=max_date, value=min_date)
  end_date = st.date_input("Tanggal Akhir", min_value=min_date, max_value=max_date, value=max_date)

  start_hour = st.slider("Jam Awal", 0, 23, 0)
  end_hour = st.slider("Jam Akhir", 0, 23, 23)

  filtered_df = df[(df['dteday'] >= pd.to_datetime(start_date)) & (df['dteday'] <= pd.to_datetime(end_date)) & (df['hr'] >= start_hour) & (df['hr'] <= end_hour)]

  total_rent = filtered_df['cnt'].sum()

  st.markdown(f"#### Total Sepeda yang Disewa: {total_rent}")

  # Menampilkan grafik jumlah sepeda yang disewa per jam
  hourly_rent = filtered_df.groupby('hr')['cnt'].sum()
  fig, ax = plt.subplots(figsize=(16, 8))
  ax.plot(hourly_rent.index, hourly_rent.values)
  ax.set_xlabel('Jam')
  ax.set_ylabel('Jumlah Sepeda Disewa')
  ax.set_title('Jumlah Sepeda yang Disewa Per Jam')
  st.pyplot(fig)

#fungsi yang menyatakan jumlah sepeda yang dirental di musim tertentu di dashboard

def show_rent_by_season(df):
  """
  Menampilkan jumlah sepeda yang dirental di musim tertentu di dashboard.
  """
  st.subheader("Jumlah Sepeda yang Disewa Berdasarkan Musim")
  season_choice = st.selectbox("Pilih Musim", df['season'].unique())

  filtered_df = df[df['season'] == season_choice]

  total_rent = filtered_df['cnt'].sum()

  st.markdown(f"#### Total Sepeda yang Disewa pada Musim {season_choice}: {total_rent}")

  # Menampilkan grafik jumlah sepeda yang disewa per bulan di musim yang dipilih
  monthly_rent = filtered_df.groupby('mnth')['cnt'].sum()
  fig, ax = plt.subplots(figsize=(16, 8))
  ax.plot(monthly_rent.index, monthly_rent.values)
  ax.set_xlabel('Bulan')
  ax.set_ylabel('Jumlah Sepeda Disewa')
  ax.set_title(f'Jumlah Sepeda yang Disewa Per Bulan pada Musim {season_choice}')
  st.pyplot(fig)

#fungsi yang menyatakan jumlah sepeda yang dirental di season tertentu di dashboard
def show_rent_by_season(df):
  """
  Menampilkan jumlah sepeda yang dirental di musim tertentu di dashboard.
  """
  st.subheader("Jumlah Sepeda yang Disewa Berdasarkan Musim")
  season_choice = st.selectbox("Pilih Musim", df['season'].unique())

  filtered_df = df[df['season'] == season_choice]

  total_rent = filtered_df['cnt'].sum()

  st.markdown(f"#### Total Sepeda yang Disewa pada Musim {season_choice}: {total_rent}")

  # Menampilkan grafik jumlah sepeda yang disewa per bulan di musim yang dipilih
  monthly_rent = filtered_df.groupby('mnth')['cnt'].sum()
  fig, ax = plt.subplots(figsize=(16, 8))
  ax.plot(monthly_rent.index, monthly_rent.values)
  ax.set_xlabel('Bulan')
  ax.set_ylabel('Jumlah Sepeda Disewa')
  ax.set_title(f'Jumlah Sepeda yang Disewa Per Bulan pada Musim {season_choice}')
  st.pyplot(fig)